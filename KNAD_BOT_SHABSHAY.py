import sqlite3
import openai
import telegram 
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import MessageHandler, CommandHandler, Filters, Updater, CallbackQueryHandler, Job, JobQueue
from datetime import datetime
from dateutil import parser
import pytz
import random
import time
import os
import speech_recognition as sr


def save_message(update, context):
    global chats

    chat_id = update.effective_chat.id
    name = update.message.from_user.first_name
    text = update.message.text
    name_and_text = f'{name}: {text}'

    if chat_id not in chats:
        chats[chat_id] = {'messages': []}


    messages = chats[chat_id]['messages']
    messages.append({'name_and_text': name_and_text})


    if len(messages) > 1000:
        messages = messages[-1000:]

    chats[chat_id]['messages'] = messages

    print(chats)




def save_voice_message(update, context):

    audio = update.message.voice

    if audio is not None:
        f = context.bot.get_file(audio.file_id)
        f.download('voice.ogg')

        text = voice_translator('voice.ogg', context.bot, update)

        update.message.reply_text(text)
    else:
        print('—Ñ–∞–π–ª–∞ –Ω–µ—Ç')

def voice_translator(audio_path, bot, update):
    if os.path.isfile(audio_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        r = sr.Recognizer()
        audio_f = open(audio_path, 'rb')
        audio = r.record(audio_f)

        text_from_voice = r.recognize_google(audio, language='ru-RU')
        bot.send_message(chat_id = update.effective_chat.id, text = text_from_voice)
    else:
        bot.send_message(chat_id = update.effective_chat.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä—á–µ—å")




def summary_command(update, context):

    if len(context.args) == 0 or not context.args[0].isdigit():
        context.bot.send_message(chat_id = update.effective_chat.id, text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /summary –≤ –≤–∏–¥–µ —Ü–∏—Ñ—Ä—ã.')
        pass

    num = int(context.args[0])
    chat_id = update.effective_chat.id

    print(num)
    print(chat_id)

    if chat_id in chats:
        messages = chats[chat_id]['messages']
        num = min(num, len(messages))
        message_texts = [message['name_and_text'] for message in messages[-num:]]

        model_response = openai.Completion.create(
            engine = 'gpt-3.5-turbo-instruct',
            prompt = '\n'.join(message_texts) + '\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∫—Ç–æ –æ —á–µ–º –±—ã–ª —Ä–∞–∑–≥–æ–≤–æ—Ä?',
            max_tokens = 1800,
            n = 1,
            stop = None,
            temperature = 0.5,
        )
        summary = model_response.choices[0].text
        bot.send_message(chat_id = update.effective_chat.id, text = f'{summary} \n\n–ò–Ω–æ–≥–¥–∞ –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –Ω–µ—Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ú–´ –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π')




def assistent_command(update, context):

    message = context.args
    request = ' '.join(message)
    print(request)

    model_response = openai.Completion.create(
        engine='gpt-3.5-turbo-instruct',
        prompt=request,
        max_tokens=1800,
        n=1,
        stop=None,
        temperature=0.5,
    )
    answer = model_response.choices[0].text
    bot.send_message(chat_id = update.effective_chat.id, text = f'{answer} \n\n–ò–Ω–æ–≥–¥–∞ –±–æ—Ç –≤—ã–¥–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π - –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ–π (–Ω–µ—Ç)')




def paint_command(update, context):

    message = context.args
    request = ' '.join(message)
    print(request)

    response = openai.Completion.create(
        engine="davinci",
        prompt=f'–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {request}',
        max_tokens=100,
    )
    image_url = response.choices[0].text.strip()
    bot.send_message(chat_id=update.effective_chat.id,
                     text=image_url)

def remind_command(update, context):
    global reminds

    chat_id = update.effective_chat.id
    args = context.args

    if len(args) < 2:
        bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º')
        return

    date_time = f'{args[0]} {args[1]}'
    date_format = '%d.%m.%Y %H:%M'

    remind_time = datetime.strptime(date_time, date_format)

    message = ' '.join(args[2:])
    if chat_id not in reminds:
        reminds[chat_id] = {'reminders': []}

    reminds[chat_id]['reminders'].append({'time': remind_time, 'message': message})
    bot.send_message(chat_id = chat_id, text = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {message} –≤ {remind_time} –ø–æ –ú–°–ö')

    print(reminds)




def remind_checker(context):
    global reminds

    moscow_time = pytz.timezone('Europe/Moscow')
    chat_id = context.job.context['chat_id']

    if chat_id in reminds:
        time_now = datetime.now(moscow_time)
        reminders = reminds[chat_id]['reminders']
        reminders_to_remove = []

        for reminder in reminders:
            remind_time = reminder['remind_time']
            message = reminder['message']

            if time_now >= remind_time:
                bot.send_message(chat_id=chat_id, text=f'–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: {message}')
                reminders_to_remove.append(reminder)

        for reminder in reminders_to_remove:
            reminders.remove(reminder)




def choose_kitty(update, context):
    global kitties_of_the_day

    chat = update.effective_chat
    chat_id = chat.id

    chat = context.bot.get_chat(chat_id)
    members_count = chat.get_members_count()
    usernames = [member.user.username for member in members if member.user.username]

    chosen_kitty = random.choice(usernames)
    kitties_of_the_day[chat_id] = chosen_kitty

    context.bot.send_message(chat_id=chat_id, text=f"{chosen_kitty} - –ö–æ—Ç–∏–∫ –¥–Ω—è!")


    

def get_kitty(update, context):
    global kitties_of_the_day

    chat = update.effective_chat
    chat_id = chat.id

    moscow_time = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_time)
    midnight = now.replace(hour = 0, minute = 0, second = 0, microsecond = 0)

    if chat_id in kitties_of_the_day:
        chosen_kitty = kitties_of_the_day[chat_id]
        context.bot.send_message(chat_id = chat_id, text  =f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ö–æ—Ç–∏–∫ –¥–Ω—è: {chosen_kitty}")
    else:
        context.bot.send_message(chat_id = chat_id, text = "–ö–æ—Ç–∏–∫ –¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")








def reset_command(update, context):
    chat_id = update.effective_chat.id

    keyboard = [
        [InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞', callback_data = 'clear_chat')],
        [InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ—Ç–∞', callback_data = 'clear_bot')],
        [InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data = 'cancel')]
    ]

    bot.send_message(chat_id = chat_id, text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', reply_markup = InlineKeyboardMarkup(keyboard))


def button_callback(update, context):
    global chats

    query = update.callback_query
    chat_id = query.message.chat_id
    message_id = query.message.message_id

    if query.data == 'clear_chat':
        if chat_id in chats:
            chats[chat_id]['messages'] = []
            bot.send_message(chat_id = chat_id, text = '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞')
            bot.delete_message(chat_id = chat_id, message_id = message_id)

    elif query.data == 'clear_bot':
        chats = {}
        bot.send_message(chat_id = chat_id, text = '–ò—Å—Ç–æ—Ä–∏—è –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω–∞')
        bot.delete_message(chat_id=chat_id, message_id = message_id)

    elif query.data == 'cancel':
        bot.delete_message(chat_id = chat_id, message_id = message_id)




def start_command(update, context):
    bot.send_message(chat_id = update.effective_chat.id, text = '–ü—Ä–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π (–Ω–µ—Ç) –±–æ—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–æ–≤.  \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /commands. \n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üòÅ ')
    chat_id = update.effective_chat.id
    remind_queue = updater.job_queue
    context.job_queue.run_repeating(remind_checker, interval=60, first=0, context={'chat_id': chat_id})




def help_command(update, context):
    bot.send_message(chat_id = update.effective_chat.id, text = '–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:' \
                              '\n/summary n –≤—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö n —Å–æ–æ–±—â–µ–Ω–∏–π' \
                              '\n/assist  –≤–∏—Ä—É—Ç–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å'
                              '\n/reset  –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'
                              '\n/remind  —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
                              '\n/paint text  —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ç —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
                              '\n/remind  —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'                            
                              '\n/kotik_of_a_day  –∏—â–µ—Ç –∫–æ—Ç–∏–∫–∞ –¥–Ω—è')



telegram_token = '6862454013:AAFyftc7Ax3jeAFDA2MkiOdMhPdeT5_IXOE'
openai_api_key = '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'

chats = {}
reminds = {}
kitties_of_the_day = {}


bot = telegram.Bot(token = telegram_token)
openai.api_key = openai_api_key
updater = Updater(telegram_token, use_context = True)
dispatcher = updater.dispatcher

dispatcher.add_handler(CommandHandler('start', start_command))
dispatcher.add_handler(CommandHandler('commands', help_command))
dispatcher.add_handler(CommandHandler('reset', reset_command))


dispatcher.add_handler(CommandHandler('summary', summary_command))
dispatcher.add_handler(CommandHandler('assist', assistent_command))
dispatcher.add_handler(CommandHandler('remind', remind_command))
dispatcher.add_handler(CommandHandler("kotik_dnya", choose_kitty))
dispatcher.add_handler(CommandHandler("get_kotik", get_kitty))
dispatcher.add_handler(CommandHandler("paint", paint_command))


dispatcher.add_handler(CallbackQueryHandler(button_callback))


dispatcher.add_handler(MessageHandler(Filters.voice & Filters.audio, save_voice_message))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, save_message))


updater.start_polling()